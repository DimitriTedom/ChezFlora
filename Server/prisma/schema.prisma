generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum Category {
  FRESH_FLOWERS
  BOUQUETS
  POTTED_PLANTS
  DECORATION
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  PROCESSING
  SHIPPING
  DELIVERED
  CANCELLED
  APPROVED
  REJECTED
}

enum QuoteStatus {
  PENDING
  PROCESSING
  CANCELLED
  APPROVED
  REJECTED
}

enum ArticleCategory {
  TIPS
  DECOR_TRENDS
  GIFT_IDEAS
}

enum EventType {
  WEDDING
  BIRTHDAY
  FUNERAL
  CHRISTMASS
  VALENTINES
  WOMENDAY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Embedded Types
type CartItemDetails {
  productId String
  title     String
  image     String
  price     Float
  quantity  Int
}

type AddressInfo {
  addressId  String
  address    String
  city       String
  postalCode String
  phone      String
  notes      String?
}

// Models
model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  price         Float
  saleprice     Float?
  stock         Int
  category      Category
  event         EventType
  image         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  averageReview Float?

  reviews ProductReview[]

  cartItems CartItem[]
}

model Article {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  authorId    String
  author      User            @relation(fields: [authorId], references: [id])
  category    ArticleCategory
  publishedAt DateTime
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  reviews BlogReview[]
}

model PendingUser {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  password     String
  otp          String
  otpExpiresAt DateTime
  createdAt    DateTime @default(now())
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  name         String
  password     String
  role         Role      @default(USER)
  otp          String?
  otpExpiresAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  addresses      Address[]
  orders         Order[]
  articles       Article[]
  quoteRequests  QuoteRequest[]
  carts          Cart[]
  productReviews ProductReview[]
  blogReviews    BlogReview[]
}

model ProductReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  userName  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  userName  String
  user      User     @relation(fields: [userId], references: [id])
  articleId String
  article   Article  @relation(fields: [articleId], references: [id])
  rating    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartId          String
  cartItems       CartItemDetails[]
  addressInfo     AddressInfo
  orderStatus     Status            @default(PENDING)
  paymentMethod   String
  paymentStatus   PaymentStatus     @default(PENDING)
  totalAmount     Float
  orderDate       DateTime          @default(now())
  orderUpdateDate DateTime          @updatedAt
  paymentId       String?
  payerId         String?
  createdAt       DateTime          @default(now())
}

model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address    String
  phone      String
  city       String
  postalCode String
  notes      String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
}

model QuoteRequest {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventDate       DateTime
  estimatedBudget Float
  adminResponse   String?
  eventType       EventType
  description     String
  status          QuoteStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}
