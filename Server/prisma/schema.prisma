generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums (Category, Role, Status, ArticleCategory, EventType)

enum Category {
  FRESH_FLOWERS
  BOUQUETS
  POTTED_PLANTS
  DECORATION
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  PROCESSING
  SHIPPING
  DELIVERED
  CANCELLED
  APPROVED
  REJECTED
}

enum ArticleCategory {
  TIPS
  DECOR_TRENDS
  GIFT_IDEAS
}

enum EventType {
  WEDDING
  BIRTHDAY
  FUNERAL
  CHRISTMASS
  VALENTINES
  WOMENDAY
}

// Models

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  saleprice   Float?
  stock       Int
  category    Category
  event       EventType
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  comments  Comment[]
  reviews   Review[]
  cartItems CartItem[]
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  name         String
  password     String
  role         Role      @default(USER)
  otp          String?
  otpExpiresAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  addresses     Address[]
  orders        Order[]
  comments      Comment[]
  articles      Article[]
  quoteRequests QuoteRequest[]

  carts Cart[]
}

model Order {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  cartId           String
  cartItems        CartItemDetails[]
  addressInfo      AddressInfo
  orderStatus      String
  paymentMethod    String
  paymentStatus    String
  totalAmount      Float
  orderDate        DateTime @default(now())
  orderUpdateDate  DateTime @updatedAt
  paymentId        String?
  payerId          String?

  createdAt        DateTime @default(now())
}

model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  address    String
  phone      String
  city       String
  postalCode String
  notes      String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
}

// Embedded Types (for Order)

type CartItemDetails {
  productId String
  title     String
  image     String
  price     Float
  quantity  Int
}

type AddressInfo {
  addressId String
  address   String
  city      String
  pincode   String
  phone     String
  notes     String?
}

// Other models remain unchanged

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  articleId String?
  article   Article? @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  authorId    String
  author      User            @relation(fields: [authorId], references: [id])
  category    ArticleCategory
  publishedAt DateTime
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  comments Comment[]
}

model QuoteRequest {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  eventDate   DateTime
  eventType   EventType
  description String
  status      Status    @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Refined Review Model

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


//A Review should have a one-to-many relation with User and Product, meaning multiple users can review the same product.
//A CartItem should have a many-to-one relation with Product because multiple users can add the same product to their cart.
